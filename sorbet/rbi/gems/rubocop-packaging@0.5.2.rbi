# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rubocop-packaging` gem.
# Please instead update this file by running `bin/tapioca gem rubocop-packaging`.

# source://rubocop-packaging//lib/rubocop/packaging/version.rb#3
module RuboCop; end

# source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#6
module RuboCop::Cop; end

# source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#7
module RuboCop::Cop::Packaging; end

# This cop flags the `require "bundler/setup"` calls if they're
# made from inside the tests directory.
#
# @example
#
#   # bad
#   require "foo"
#   require "bundler/setup"
#
#   # good
#   require "foo"
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#20
class RuboCop::Cop::Packaging::BundlerSetupInTests < ::RuboCop::Cop::Base
  include ::RuboCop::Packaging::LibHelperModule
  include ::RuboCop::Cop::RangeHelp
  extend ::RuboCop::Cop::AutoCorrector

  # Called from on_send, this method helps to autocorrect
  # the offenses flagged by this cop.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#57
  def autocorrect(corrector, node); end

  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#29
  def bundler_setup?(param0 = T.unsafe(nil)); end

  # This method is called from inside `#def_node_matcher`.
  # It flags an offense if the `require "bundler/setup"`
  # call is made from the tests directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#66
  def bundler_setup_in_test_dir?(str); end

  # This method determines if the call is made *from* the tests directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#71
  def falls_in_test_dir?; end

  # Extended from the Base class.
  # More about the `#on_new_investigation` method can be found here:
  # https://github.com/rubocop-hq/rubocop/blob/343f62e4555be0470326f47af219689e21c61a37/lib/rubocop/cop/base.rb
  #
  # Processing of the AST happens here.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#39
  def on_new_investigation; end

  # Extended from AST::Traversal.
  # More about the `#on_send` method can be found here:
  # https://github.com/rubocop-hq/rubocop-ast/blob/08d0f49a47af1e9a30a6d8f67533ba793c843d67/lib/rubocop/ast/traversal.rb#L112
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#47
  def on_send(node); end
end

# This is the message that will be displayed when RuboCop::Packaging finds
# an offense of using `require "bundler/setup"` in the tests directory.
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/bundler_setup_in_tests.rb#27
RuboCop::Cop::Packaging::BundlerSetupInTests::MSG = T.let(T.unsafe(nil), String)

# This cop flags the usage of `git ls-files` in gemspec
# and suggests to use a plain Ruby alternative, like `Dir`,
# `Dir.glob`, or `Rake::FileList` instead.
#
# @example
#
#   # bad
#   Gem::Specification.new do |spec|
#   spec.files = `git ls-files`.split("\n")
#   end
#
#   # good
#   Gem::Specification.new do |spec|
#   spec.files = Dir["lib/**/*", "LICENSE", "README.md"]
#   end
#
#   # bad
#   Gem::Specification.new do |spec|
#   spec.files = Dir.chdir(File.expand_path(__dir__)) do
#   `git ls-files -z`.split("\\x0").reject { |f| f.match(%r{^(test|spec|features)/}) }
#   end
#   end
#
#   # good
#   require "rake/file_list"
#
#   Gem::Specification.new do |spec|
#   spec.files = Rake::FileList["**/*"].exclude(*File.read(".gitignore").split)
#   end
#
#   # bad
#   Gem::Specification.new do |spec|
#   spec.files        = `git ls-files -- lib/`.split("\n")
#   spec.executables  = `git ls-files -- bin/*`.split("\n").map{ |f| File.basename(f) }
#   end
#
#   # good
#   Gem::Specification.new do |spec|
#   spec.files        = Dir.glob("lib/**/*")
#   spec.executables  = Dir.glob("bin/*").map{ |f| File.basename(f) }
#   end
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/gemspec_git.rb#48
class RuboCop::Cop::Packaging::GemspecGit < ::RuboCop::Cop::Base
  # Extended from the Cop class.
  # More about the `#investigate` method can be found here:
  # https://github.com/rubocop-hq/rubocop/blob/59543c8e2b66bff249de131fa9105f3eb11e9edb/lib/rubocop/cop/cop.rb#L13-L25
  #
  # Processing of the AST happens here.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/gemspec_git.rb#70
  def on_new_investigation; end

  # This method is called from inside `#def_node_search`.
  # It is used to find strings which start with "git".
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/gemspec_git.rb#83
  def starts_with_git?(str); end

  # source://rubocop-packaging//lib/rubocop/cop/packaging/gemspec_git.rb#56
  def xstr(param0); end
end

# This is the message that will be displayed when RuboCop finds an
# offense of using `git ls-files`.
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/gemspec_git.rb#51
RuboCop::Cop::Packaging::GemspecGit::MSG = T.let(T.unsafe(nil), String)

# This cop flags the `require` calls, from anywhere mapping to
# the "lib" directory, except originating from lib/.
#
# @example
#
#   # bad
#   require "../lib/foo/bar"
#
#   # good
#   require "foo/bar"
#
#   # bad
#   require File.expand_path("../../lib/foo", __FILE__)
#
#   # good
#   require "foo"
#
#   # bad
#   require File.expand_path("../../../lib/foo/bar/baz/qux", __dir__)
#
#   # good
#   require "foo/bar/baz/qux"
#
#   # bad
#   require File.dirname(__FILE__) + "/../../lib/baz/qux"
#
#   # good
#   require "baz/qux"
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#37
class RuboCop::Cop::Packaging::RequireHardcodingLib < ::RuboCop::Cop::Base
  include ::RuboCop::Packaging::LibHelperModule
  extend ::RuboCop::Cop::AutoCorrector

  # This method is called from inside `#def_node_matcher`.
  # It flags an offense if the `require` call is made from
  # anywhere except the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#85
  def falls_in_lib?(str); end

  # This method is called from inside `#def_node_matcher`.
  # It flags an offense if the `require` call (using the __FILE__
  # arguement) is made from anywhere except the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#93
  def falls_in_lib_using_file?(str); end

  # This method preprends a "." to the string that starts with "/".
  # And then determines if that call is made to "lib/".
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#100
  def falls_in_lib_with_file_dirname_plus_str?(str); end

  # Called from on_send, this method helps to replace
  # the "bad" require call with the "good" one.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#77
  def good_require_call; end

  # Extended from the Base class.
  # More about the `#on_new_investigation` method can be found here:
  # https://github.com/rubocop-hq/rubocop/blob/343f62e4555be0470326f47af219689e21c61a37/lib/rubocop/cop/base.rb
  #
  # Processing of the AST happens here.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#59
  def on_new_investigation; end

  # Extended from AST::Traversal.
  # More about the `#on_send` method can be found here:
  # https://github.com/rubocop-hq/rubocop-ast/blob/08d0f49a47af1e9a30a6d8f67533ba793c843d67/lib/rubocop/ast/traversal.rb#L112
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#67
  def on_send(node); end

  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#46
  def require?(param0 = T.unsafe(nil)); end
end

# This is the message that will be displayed when RuboCop::Packaging
# finds an offense of using `require` with relative path to lib.
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/require_hardcoding_lib.rb#43
RuboCop::Cop::Packaging::RequireHardcodingLib::MSG = T.let(T.unsafe(nil), String)

# This cop flags the `require_relative` calls, from anywhere
# mapping to the "lib" directory, except originating from lib/ or
# the gemspec file, and suggests to use `require` instead.
#
# @example
#
#   # bad
#   require_relative "lib/foo"
#
#   # good
#   require "foo"
#
#   # bad
#   require_relative "../../lib/foo/bar"
#
#   # good
#   require "foo/bar"
#
#   # good
#   require_relative "foo/bar/bax"
#   require_relative "baz/qux"
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#30
class RuboCop::Cop::Packaging::RequireRelativeHardcodingLib < ::RuboCop::Cop::Base
  include ::RuboCop::Packaging::LibHelperModule
  extend ::RuboCop::Cop::AutoCorrector

  # This method is called from inside `#def_node_matcher`.
  # It flags an offense if the `require_relative` call is made
  # from anywhere except the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#75
  def falls_in_lib?(str); end

  # Called from on_send, this method helps to replace the
  # "bad" require_relative call with the "good" one.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#67
  def good_require_call; end

  # Extended from the Base class.
  # More about the `#on_new_investigation` method can be found here:
  # https://github.com/rubocop-hq/rubocop/blob/343f62e4555be0470326f47af219689e21c61a37/lib/rubocop/cop/base.rb
  #
  # Processing of the AST happens here.
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#49
  def on_new_investigation; end

  # Extended from AST::Traversal.
  # More about the `#on_send` method can be found here:
  # https://github.com/rubocop-hq/rubocop-ast/blob/08d0f49a47af1e9a30a6d8f67533ba793c843d67/lib/rubocop/ast/traversal.rb#L112
  #
  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#57
  def on_send(node); end

  # source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#39
  def require_relative(param0 = T.unsafe(nil)); end
end

# This is the message that will be displayed when RuboCop finds an
# offense of using `require_relative` with relative path to lib.
#
# source://rubocop-packaging//lib/rubocop/cop/packaging/require_relative_hardcoding_lib.rb#36
RuboCop::Cop::Packaging::RequireRelativeHardcodingLib::MSG = T.let(T.unsafe(nil), String)

# RuboCop Packaging project namespace
#
# source://rubocop-packaging//lib/rubocop/packaging/version.rb#4
module RuboCop::Packaging; end

# source://rubocop-packaging//lib/rubocop/packaging.rb#10
RuboCop::Packaging::CONFIG = T.let(T.unsafe(nil), Hash)

# source://rubocop-packaging//lib/rubocop/packaging.rb#9
RuboCop::Packaging::CONFIG_DEFAULT = T.let(T.unsafe(nil), Pathname)

# Because RuboCop doesn't yet support plugins, we have to monkey patch in a
# bit of our configuration.
#
# source://rubocop-packaging//lib/rubocop/packaging/inject.rb#7
module RuboCop::Packaging::Inject
  class << self
    # source://rubocop-packaging//lib/rubocop/packaging/inject.rb#8
    def defaults!; end
  end
end

# This helper module extracts the methods which can be used
# in other cop classes.
#
# source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#7
module RuboCop::Packaging::LibHelperModule
  # This method determines if that call is made *from* the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#25
  def inspected_file_falls_in_lib?; end

  # This method determines if that call is made *from* the "gemspec" file.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#30
  def inspected_file_is_gemspec?; end

  # This method determines if the inspected file is not in lib/ or
  # isn't a gemspec file.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#36
  def inspected_file_is_not_in_lib_or_gemspec?; end

  # For determining the root directory of the project.
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#9
  def root_dir; end

  # This method determines if the calls are made to the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#14
  def target_falls_in_lib?(str); end

  # This method determines if the calls (using the __FILE__ argument)
  # are made to the "lib" directory.
  #
  # @return [Boolean]
  #
  # source://rubocop-packaging//lib/rubocop/packaging/lib_helper_module.rb#20
  def target_falls_in_lib_using_file?(str); end
end

# source://rubocop-packaging//lib/rubocop/packaging.rb#8
RuboCop::Packaging::PROJECT_ROOT = T.let(T.unsafe(nil), Pathname)

# source://rubocop-packaging//lib/rubocop/packaging/version.rb#5
RuboCop::Packaging::VERSION = T.let(T.unsafe(nil), String)
