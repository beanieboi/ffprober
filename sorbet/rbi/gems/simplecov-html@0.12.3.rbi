# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `simplecov-html` gem.
# Please instead update this file by running `bin/tapioca gem simplecov-html`.

module SimpleCov
  extend ::SimpleCov::Configuration

  class << self
    # source://simplecov/0.21.2/lib/simplecov.rb#174
    def at_exit_behavior; end

    # source://simplecov/0.21.2/lib/simplecov.rb#170
    def clear_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#86
    def collate(result_filenames, profile = T.unsafe(nil), ignore_timeout: T.unsafe(nil), &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#223
    def exit_and_report_previous_error(exit_status); end

    # source://simplecov/0.21.2/lib/simplecov.rb#200
    def exit_status_from_exception; end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit; end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#28
    def external_at_exit?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#131
    def filtered(files); end

    # source://simplecov/0.21.2/lib/simplecov.rb#268
    def final_result_process?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#142
    def grouped(files); end

    # source://simplecov/0.21.2/lib/simplecov.rb#162
    def load_adapter(name); end

    # source://simplecov/0.21.2/lib/simplecov.rb#158
    def load_profile(name); end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def pid; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def pid=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#213
    def previous_error?(error_exit_status); end

    # source://simplecov/0.21.2/lib/simplecov.rb#248
    def process_result(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#233
    def process_results_and_report_error; end

    # source://simplecov/0.21.2/lib/simplecov.rb#229
    def ready_to_process_results?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#101
    def result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#124
    def result?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#256
    def result_exit_status(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#296
    def round_coverage(coverage); end

    # source://simplecov/0.21.2/lib/simplecov.rb#186
    def run_exit_tasks!; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def running; end

    # source://simplecov/0.21.2/lib/simplecov.rb#24
    def running=(_arg0); end

    # source://simplecov/0.21.2/lib/simplecov.rb#48
    def start(profile = T.unsafe(nil), &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#276
    def wait_for_other_processes; end

    # source://simplecov/0.21.2/lib/simplecov.rb#285
    def write_last_run(result); end

    private

    # source://simplecov/0.21.2/lib/simplecov.rb#397
    def adapt_coverage_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#369
    def add_not_loaded_files(result); end

    # source://simplecov/0.21.2/lib/simplecov.rb#302
    def initial_setup(profile, &block); end

    # source://simplecov/0.21.2/lib/simplecov.rb#361
    def lookup_corresponding_ruby_coverage_name(criterion); end

    # source://simplecov/0.21.2/lib/simplecov.rb#423
    def make_parallel_tests_available; end

    # source://simplecov/0.21.2/lib/simplecov.rb#432
    def probably_running_parallel_tests?; end

    # source://simplecov/0.21.2/lib/simplecov.rb#386
    def process_coverage_result; end

    # source://simplecov/0.21.2/lib/simplecov.rb#408
    def remove_useless_results; end

    # source://simplecov/0.21.2/lib/simplecov.rb#418
    def result_with_not_loaded_files; end

    # source://simplecov/0.21.2/lib/simplecov.rb#314
    def start_coverage_measurement; end

    # source://simplecov/0.21.2/lib/simplecov.rb#349
    def start_coverage_with_criteria; end
  end
end

class SimpleCov::ArrayFilter < ::SimpleCov::Filter
  # source://simplecov/0.21.2/lib/simplecov/filter.rb#78
  def initialize(filter_argument); end

  # source://simplecov/0.21.2/lib/simplecov/filter.rb#88
  def matches?(source_files_list); end
end

class SimpleCov::BlockFilter < ::SimpleCov::Filter
  # source://simplecov/0.21.2/lib/simplecov/filter.rb#72
  def matches?(source_file); end
end

module SimpleCov::Combine
  private

  # source://simplecov/0.21.2/lib/simplecov/combine.rb#16
  def combine(combiner_module, coverage_a, coverage_b); end

  # source://simplecov/0.21.2/lib/simplecov/combine.rb#22
  def empty_coverage?(coverage_a, coverage_b); end

  # source://simplecov/0.21.2/lib/simplecov/combine.rb#26
  def existing_coverage(coverage_a, coverage_b); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/combine.rb#16
    def combine(combiner_module, coverage_a, coverage_b); end

    # source://simplecov/0.21.2/lib/simplecov/combine.rb#22
    def empty_coverage?(coverage_a, coverage_b); end

    # source://simplecov/0.21.2/lib/simplecov/combine.rb#26
    def existing_coverage(coverage_a, coverage_b); end
  end
end

module SimpleCov::Combine::BranchesCombiner
  private

  # source://simplecov/0.21.2/lib/simplecov/combine/branches_combiner.rb#23
  def combine(coverage_a, coverage_b); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/combine/branches_combiner.rb#23
    def combine(coverage_a, coverage_b); end
  end
end

module SimpleCov::Combine::FilesCombiner
  private

  # source://simplecov/0.21.2/lib/simplecov/combine/files_combiner.rb#17
  def combine(coverage_a, coverage_b); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/combine/files_combiner.rb#17
    def combine(coverage_a, coverage_b); end
  end
end

module SimpleCov::Combine::LinesCombiner
  private

  # source://simplecov/0.21.2/lib/simplecov/combine/lines_combiner.rb#12
  def combine(coverage_a, coverage_b); end

  # source://simplecov/0.21.2/lib/simplecov/combine/lines_combiner.rb#32
  def merge_line_coverage(first_val, second_val); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/combine/lines_combiner.rb#12
    def combine(coverage_a, coverage_b); end

    # source://simplecov/0.21.2/lib/simplecov/combine/lines_combiner.rb#32
    def merge_line_coverage(first_val, second_val); end
  end
end

module SimpleCov::Combine::ResultsCombiner
  private

  # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#22
  def combine(*results); end

  # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#55
  def combine_file_coverage(coverage_a, coverage_b); end

  # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#36
  def combine_result_sets(combined_results, result); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#22
    def combine(*results); end

    # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#55
    def combine_file_coverage(coverage_a, coverage_b); end

    # source://simplecov/0.21.2/lib/simplecov/combine/results_combiner.rb#36
    def combine_result_sets(combined_results, result); end
  end
end

module SimpleCov::CommandGuesser
  class << self
    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#16
    def guess; end

    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#14
    def original_run_command; end

    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#14
    def original_run_command=(_arg0); end

    private

    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#31
    def from_command_line_options; end

    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#46
    def from_defined_constants; end

    # source://simplecov/0.21.2/lib/simplecov/command_guesser.rb#22
    def from_env; end
  end
end

module SimpleCov::Configuration
  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#161
  def adapters; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#367
  def add_filter(filter_argument = T.unsafe(nil), &filter_proc); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#376
  def add_group(group_name, filter_argument = T.unsafe(nil), &filter_proc); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#193
  def at_exit(&block); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#233
  def at_fork(&block); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#428
  def branch_coverage?; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#432
  def branch_coverage_supported?; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#424
  def clear_coverage_criteria; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#87
  def command_name(name = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#177
  def configure(&block); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#416
  def coverage_criteria; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#393
  def coverage_criterion(criterion = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#420
  def coverage_criterion_enabled?(criterion); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#34
  def coverage_dir(dir = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#46
  def coverage_path; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#432
  def coverage_start_arguments_supported?; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#401
  def enable_coverage(criterion); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#202
  def enable_for_subprocesses(value = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#209
  def enabled_for_subprocesses?; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#74
  def filters; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#14
  def filters=(_arg0); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#98
  def formatter(formatter = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#14
  def formatter=(_arg0); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#117
  def formatters; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#110
  def formatters=(formatters); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#150
  def groups; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#14
  def groups=(_arg0); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#313
  def maximum_coverage_drop(coverage_drop = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#279
  def merge_timeout(seconds = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#290
  def minimum_coverage(coverage = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#330
  def minimum_coverage_by_file(coverage = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#140
  def nocov_token(nocov_token = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#407
  def primary_coverage(criterion = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#129
  def print_error_status; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#14
  def print_error_status=(_arg0); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#157
  def profiles; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#251
  def project_name(new_name = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#300
  def raise_on_invalid_coverage(coverage, coverage_setting); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#344
  def refuse_coverage_drop(*criteria); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#22
  def root(root = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#140
  def skip_token(nocov_token = T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#59
  def track_files(glob); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#67
  def tracked_files; end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#262
  def use_merging(use = T.unsafe(nil)); end

  private

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#464
  def minimum_possible_coverage_exceeded(coverage_option); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#471
  def parse_filter(filter_argument = T.unsafe(nil), &filter_proc); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#447
  def raise_if_criterion_disabled(criterion); end

  # source://simplecov/0.21.2/lib/simplecov/configuration.rb#456
  def raise_if_criterion_unsupported(criterion); end
end

# source://simplecov/0.21.2/lib/simplecov/configuration.rb#381
SimpleCov::Configuration::DEFAULT_COVERAGE_CRITERION = T.let(T.unsafe(nil), Symbol)

# source://simplecov/0.21.2/lib/simplecov/configuration.rb#380
SimpleCov::Configuration::SUPPORTED_COVERAGE_CRITERIA = T.let(T.unsafe(nil), Array)

class SimpleCov::CoverageStatistics
  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#34
  def initialize(covered:, missed:, total_strength: T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#14
  def covered; end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#14
  def missed; end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#14
  def percent; end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#14
  def strength; end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#14
  def total; end

  private

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#44
  def compute_percent(covered, missed, total); end

  # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#50
  def compute_strength(total_strength, total); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/coverage_statistics.rb#16
    def from(coverage_statistics); end
  end
end

module SimpleCov::ExitCodes; end

# source://simplecov/0.21.2/lib/simplecov/exit_codes.rb#6
SimpleCov::ExitCodes::EXCEPTION = T.let(T.unsafe(nil), Integer)

module SimpleCov::ExitCodes::ExitCodeHandling
  private

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/exit_code_handling.rb#8
  def call(result, coverage_limits:); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/exit_code_handling.rb#20
  def coverage_checks(result, coverage_limits); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/exit_codes/exit_code_handling.rb#8
    def call(result, coverage_limits:); end

    # source://simplecov/0.21.2/lib/simplecov/exit_codes/exit_code_handling.rb#20
    def coverage_checks(result, coverage_limits); end
  end
end

# source://simplecov/0.21.2/lib/simplecov/exit_codes.rb#8
SimpleCov::ExitCodes::MAXIMUM_COVERAGE_DROP = T.let(T.unsafe(nil), Integer)

# source://simplecov/0.21.2/lib/simplecov/exit_codes.rb#7
SimpleCov::ExitCodes::MINIMUM_COVERAGE = T.let(T.unsafe(nil), Integer)

class SimpleCov::ExitCodes::MaximumCoverageDropCheck
  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#6
  def initialize(result, maximum_coverage_drop); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#28
  def exit_code; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#11
  def failing?; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#17
  def report; end

  private

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#49
  def compute_coverage_drop_data; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#42
  def coverage_drop_violations; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#61
  def drop_percent(criterion); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#73
  def last_coverage(criterion); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#36
  def last_run; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#34
  def maximum_coverage_drop; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#34
  def result; end
end

# source://simplecov/0.21.2/lib/simplecov/exit_codes/maximum_coverage_drop_check.rb#60
SimpleCov::ExitCodes::MaximumCoverageDropCheck::MAX_DROP_ACCURACY = T.let(T.unsafe(nil), Integer)

class SimpleCov::ExitCodes::MinimumCoverageByFileCheck
  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#6
  def initialize(result, minimum_coverage_by_file); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#26
  def exit_code; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#11
  def failing?; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#15
  def report; end

  private

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#41
  def compute_minimum_coverage_data; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#32
  def minimum_coverage_by_file; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#34
  def minimum_violations; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_coverage_by_file_check.rb#32
  def result; end
end

class SimpleCov::ExitCodes::MinimumOverallCoverageCheck
  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#6
  def initialize(result, minimum_coverage); end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#26
  def exit_code; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#11
  def failing?; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#15
  def report; end

  private

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#38
  def calculate_minimum_violations; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#32
  def minimum_coverage; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#34
  def minimum_violations; end

  # source://simplecov/0.21.2/lib/simplecov/exit_codes/minimum_overall_coverage_check.rb#32
  def result; end
end

# source://simplecov/0.21.2/lib/simplecov/exit_codes.rb#5
SimpleCov::ExitCodes::SUCCESS = T.let(T.unsafe(nil), Integer)

class SimpleCov::FileList
  include ::Enumerable
  extend ::Forwardable

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#22
  def initialize(files); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#101
  def branch_covered_percent; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def count(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#26
  def coverage_statistics; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#30
  def coverage_statistics_by_file; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#92
  def covered_branches; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#35
  def covered_lines; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#76
  def covered_percent; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#60
  def covered_percentages; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#82
  def covered_strength; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def each(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def empty?(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#65
  def least_covered_file; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def length(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#70
  def lines_of_code; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def map(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#97
  def missed_branches; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#40
  def missed_lines; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#45
  def never_lines; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def size(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#52
  def skipped_lines; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_a(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def to_ary(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#87
  def total_branches; end

  private

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#114
  def compute_coverage_statistics; end

  # source://simplecov/0.21.2/lib/simplecov/file_list.rb#107
  def compute_coverage_statistics_by_file; end
end

class SimpleCov::Filter
  # source://simplecov/0.21.2/lib/simplecov/filter.rb#18
  def initialize(filter_argument); end

  # source://simplecov/0.21.2/lib/simplecov/filter.rb#16
  def filter_argument; end

  # source://simplecov/0.21.2/lib/simplecov/filter.rb#22
  def matches?(_source_file); end

  # source://simplecov/0.21.2/lib/simplecov/filter.rb#26
  def passes?(source_file); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/filter.rb#31
    def build_filter(filter_argument); end

    # source://simplecov/0.21.2/lib/simplecov/filter.rb#37
    def class_for_argument(filter_argument); end
  end
end

module SimpleCov::Formatter
  class << self
    # source://simplecov/0.21.2/lib/simplecov/default_formatter.rb#7
    def from_env(env); end
  end
end

class SimpleCov::Formatter::HTMLFormatter
  # @return [HTMLFormatter] a new instance of HTMLFormatter
  #
  # source://simplecov-html//lib/simplecov-html.rb#19
  def initialize; end

  # @return [Boolean]
  #
  # source://simplecov-html//lib/simplecov-html.rb#38
  def branchable_result?; end

  # source://simplecov-html//lib/simplecov-html.rb#23
  def format(result); end

  # @return [Boolean]
  #
  # source://simplecov-html//lib/simplecov-html.rb#45
  def line_status?(source_file, line); end

  # source://simplecov-html//lib/simplecov-html.rb#34
  def output_message(result); end

  private

  # source://simplecov-html//lib/simplecov-html.rb#64
  def asset_output_path; end

  # source://simplecov-html//lib/simplecov-html.rb#72
  def assets_path(name); end

  # source://simplecov-html//lib/simplecov-html.rb#97
  def coverage_css_class(covered_percent); end

  # source://simplecov-html//lib/simplecov-html.rb#93
  def covered_percent(percent); end

  # Returns a table containing the given source files
  #
  # source://simplecov-html//lib/simplecov-html.rb#84
  def formatted_file_list(title, source_files); end

  # Returns the html for the given source_file
  #
  # source://simplecov-html//lib/simplecov-html.rb#77
  def formatted_source_file(source_file); end

  # Return a (kind of) unique id for the source file given. Uses SHA1 on path for the id
  #
  # source://simplecov-html//lib/simplecov-html.rb#118
  def id(source_file); end

  # source://simplecov-html//lib/simplecov-html.rb#130
  def link_to_source_file(source_file); end

  # source://simplecov-html//lib/simplecov-html.rb#60
  def output_path; end

  # source://simplecov-html//lib/simplecov-html.rb#126
  def shortened_filename(source_file); end

  # source://simplecov-html//lib/simplecov-html.rb#107
  def strength_css_class(covered_strength); end

  # Returns the an erb instance for the template of given name
  #
  # source://simplecov-html//lib/simplecov-html.rb#56
  def template(name); end

  # source://simplecov-html//lib/simplecov-html.rb#122
  def timeago(time); end
end

# source://simplecov-html//lib/simplecov-html/version.rb#6
SimpleCov::Formatter::HTMLFormatter::VERSION = T.let(T.unsafe(nil), String)

class SimpleCov::Formatter::MultiFormatter
  class << self
    # source://simplecov/0.21.2/lib/simplecov/formatter/multi_formatter.rb#26
    def [](*args); end

    # source://simplecov/0.21.2/lib/simplecov/formatter/multi_formatter.rb#17
    def new(formatters = T.unsafe(nil)); end
  end
end

module SimpleCov::Formatter::MultiFormatter::InstanceMethods
  # source://simplecov/0.21.2/lib/simplecov/formatter/multi_formatter.rb#7
  def format(result); end
end

class SimpleCov::Formatter::SimpleFormatter
  # source://simplecov/0.21.2/lib/simplecov/formatter/simple_formatter.rb#10
  def format(result); end
end

module SimpleCov::LastRun
  class << self
    # source://simplecov/0.21.2/lib/simplecov/last_run.rb#8
    def last_run_path; end

    # source://simplecov/0.21.2/lib/simplecov/last_run.rb#12
    def read; end

    # source://simplecov/0.21.2/lib/simplecov/last_run.rb#21
    def write(json); end
  end
end

class SimpleCov::LinesClassifier
  # source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#33
  def classify(lines); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#15
    def no_cov_line; end

    # source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#19
    def no_cov_line?(line); end

    # source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#26
    def whitespace_line?(line); end
  end
end

# source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#12
SimpleCov::LinesClassifier::COMMENT_LINE = T.let(T.unsafe(nil), Regexp)

# source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#9
SimpleCov::LinesClassifier::NOT_RELEVANT = T.let(T.unsafe(nil), T.untyped)

# source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#8
SimpleCov::LinesClassifier::RELEVANT = T.let(T.unsafe(nil), Integer)

# source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#11
SimpleCov::LinesClassifier::WHITESPACE_LINE = T.let(T.unsafe(nil), Regexp)

# source://simplecov/0.21.2/lib/simplecov/lines_classifier.rb#13
SimpleCov::LinesClassifier::WHITESPACE_OR_COMMENT_LINE = T.let(T.unsafe(nil), Regexp)

class SimpleCov::Profiles < ::Hash
  # source://simplecov/0.21.2/lib/simplecov/profiles.rb#18
  def define(name, &blk); end

  # source://simplecov/0.21.2/lib/simplecov/profiles.rb#28
  def load(name); end
end

class SimpleCov::RegexFilter < ::SimpleCov::Filter
  # source://simplecov/0.21.2/lib/simplecov/filter.rb#64
  def matches?(source_file); end
end

class SimpleCov::Result
  extend ::Forwardable

  # source://simplecov/0.21.2/lib/simplecov/result.rb#28
  def initialize(original_result, command_name: T.unsafe(nil), created_at: T.unsafe(nil)); end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#61
  def command_name; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#21
  def command_name=(_arg0); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def coverage_statistics(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def coverage_statistics_by_file(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def covered_branches(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def covered_lines(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def covered_percent(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def covered_percentages(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def covered_strength(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#55
  def created_at; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#19
  def created_at=(_arg0); end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#40
  def filenames; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#16
  def files; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#50
  def format!; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#45
  def groups; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def least_covered_file(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def missed_branches(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def missed_lines(*args, **_arg1, &block); end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#14
  def original_result; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#16
  def source_files; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#66
  def to_hash; end

  # source://forwardable/1.3.2/forwardable.rb#229
  def total_branches(*args, **_arg1, &block); end

  # source://forwardable/1.3.2/forwardable.rb#229
  def total_lines(*args, **_arg1, &block); end

  private

  # source://simplecov/0.21.2/lib/simplecov/result.rb#84
  def coverage; end

  # source://simplecov/0.21.2/lib/simplecov/result.rb#90
  def filter!; end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/result.rb#76
    def from_hash(hash); end
  end
end

class SimpleCov::ResultAdapter
  # source://simplecov/0.21.2/lib/simplecov/result_adapter.rb#10
  def initialize(result); end

  # source://simplecov/0.21.2/lib/simplecov/result_adapter.rb#18
  def adapt; end

  # source://simplecov/0.21.2/lib/simplecov/result_adapter.rb#8
  def result; end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/result_adapter.rb#14
    def call(*args); end
  end
end

module SimpleCov::ResultMerger
  class << self
    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#187
    def adapt_pre_simplecov_0_18_result(result); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#172
    def adapt_result(result); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#93
    def create_result(command_names, coverage); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#22
    def merge_and_store(*file_paths, ignore_timeout: T.unsafe(nil)); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#100
    def merge_coverage(*results); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#28
    def merge_results(*file_paths, ignore_timeout: T.unsafe(nil)); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#74
    def merge_valid_results(results, ignore_timeout: T.unsafe(nil)); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#117
    def merged_result; end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#51
    def parse_file(path); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#65
    def parse_json(content); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#181
    def pre_simplecov_0_18_result?(result); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#56
    def read_file(path); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#126
    def read_resultset; end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#14
    def resultset_path; end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#18
    def resultset_writelock; end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#136
    def store_result(result); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#153
    def synchronize_resultset; end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#89
    def time_since_result_creation(data); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#46
    def valid_results(file_path, ignore_timeout: T.unsafe(nil)); end

    # source://simplecov/0.21.2/lib/simplecov/result_merger.rb#85
    def within_merge_timeout?(data); end
  end
end

module SimpleCov::SimulateCoverage
  private

  # source://simplecov/0.21.2/lib/simplecov/simulate_coverage.rb#18
  def call(absolute_path); end

  class << self
    # source://simplecov/0.21.2/lib/simplecov/simulate_coverage.rb#18
    def call(absolute_path); end
  end
end

class SimpleCov::SourceFile
  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#14
  def initialize(filename, coverage_data); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#98
  def branches; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#106
  def branches_coverage_percent; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#142
  def branches_for_line(line_number); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#118
  def branches_report; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#12
  def coverage_data; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#32
  def coverage_statistics; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#129
  def covered_branches; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#48
  def covered_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#80
  def covered_percent; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#84
  def covered_strength; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#10
  def filename; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#75
  def line(number); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#153
  def line_with_missed_branch?(line_number); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#42
  def lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#70
  def lines_of_code; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#138
  def missed_branches; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#54
  def missed_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#60
  def never_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#102
  def no_branches?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#88
  def no_lines?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#20
  def project_filename; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#92
  def relevant_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#65
  def skipped_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#25
  def source; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#42
  def source_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#25
  def src; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#112
  def total_branches; end

  private

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#340
  def branch_coverage_statistics; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#318
  def build_branch(branch_data, hit_count, condition_start_line); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#267
  def build_branches; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#304
  def build_branches_from(condition, branches); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#256
  def build_branches_report; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#223
  def build_lines; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#164
  def build_no_cov_chunks; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#245
  def coverage_exceeding_source_warn; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#214
  def ensure_remove_undefs(file_lines); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#330
  def line_coverage_statistics; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#240
  def lines_strength; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#178
  def load_source; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#160
  def no_cov_chunks; end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#276
  def process_skipped_branches(branches); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#231
  def process_skipped_lines(lines); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#198
  def read_lines(file, lines, current_line); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#294
  def restore_ruby_data_structure(structure); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#206
  def set_encoding_based_on_magic_comment(file, line); end

  # source://simplecov/0.21.2/lib/simplecov/source_file.rb#194
  def shebang?(line); end
end

class SimpleCov::SourceFile::Branch
  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#12
  def initialize(start_line:, end_line:, coverage:, inline:, type:); end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#9
  def coverage; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#31
  def covered?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#9
  def end_line; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#22
  def inline?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#40
  def missed?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#70
  def overlaps_with?(line_range); end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#79
  def report; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#52
  def report_line; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#61
  def skipped!; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#66
  def skipped?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#9
  def start_line; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/branch.rb#9
  def type; end
end

class SimpleCov::SourceFile::Line
  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#25
  def initialize(src, line_number, coverage); end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#16
  def coverage; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#42
  def covered?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#14
  def line; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#14
  def line_number; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#37
  def missed?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#47
  def never?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#14
  def number; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#18
  def skipped; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#52
  def skipped!; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#58
  def skipped?; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#12
  def source; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#12
  def src; end

  # source://simplecov/0.21.2/lib/simplecov/source_file/line.rb#64
  def status; end
end

# source://simplecov/0.21.2/lib/simplecov/source_file.rb#205
SimpleCov::SourceFile::RUBY_FILE_ENCODING_MAGIC_COMMENT_REGEX = T.let(T.unsafe(nil), Regexp)

# source://simplecov/0.21.2/lib/simplecov/source_file.rb#193
SimpleCov::SourceFile::SHEBANG_REGEX = T.let(T.unsafe(nil), Regexp)

class SimpleCov::StringFilter < ::SimpleCov::Filter
  # source://simplecov/0.21.2/lib/simplecov/filter.rb#56
  def matches?(source_file); end
end

module SimpleCov::UselessResultsRemover
  class << self
    # source://simplecov/0.21.2/lib/simplecov/useless_results_remover.rb#8
    def call(coverage_result); end

    # source://simplecov/0.21.2/lib/simplecov/useless_results_remover.rb#14
    def root_regx; end
  end
end

# source://simplecov/0.21.2/lib/simplecov/version.rb#4
SimpleCov::VERSION = T.let(T.unsafe(nil), String)
